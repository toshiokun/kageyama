fe
sw
f
er
fwe
"name".split(")
"name".split
"name".split('')
:name.split('')
user = {:name => "Michael Hartl", :email => "michael@example.com"}
user[:name]
params = {}
params[:user] = {name: "Michael Hartl", email: "mhartl@example.com"}
params
params[:user][:email]
flash.each do |key. value|
flash = {success: "It worked!", error: "It failed."}
flash.each do |key, value|
puts "Key #{key.inspect} has value #{value.inspect}"
puts (1..5).to_a
puts (1..5).to_a.inspect
puts :name, :name.inspect
puts "It worked!", "It worked!".inspect
p :name]
p :name
class Word
def palindrome?(string)
string == string.reverse
w = Word.new
w.palindrome?
w.palindrome?("foobar")
w.palindrome?("level")
class Word < String
s = Word.new("level")
s.palindrome?
s.length
s]
s
s.class
s.class.superclass
s.class.superclass.sperclass
s.class.superclass.superclass
class String
def palindrome?
self == self.reverse
end
"deified".palindrome?
"".blank?
"    ".empty?
"    ".blank?
nil.blank?
require '.example_user'
require './example_user'
example = User.new
example.name
example.name = "Example User"
example.email = "user@example.com"
example.formatted_email
rm example_user.rb
User.new
User.new(name: "Michael Hartl", email: "mhartl@example.com)
user = User.new(name: "Michael Hartl", email: "mhartl@example.com)
user = User.new(name: "Michael Hartl", email: "mhartl@example.com")
User.create(name: "A Nother", email: "another@example.com")
uUser.second
user.second
foo = User.create(name: "Foo", email: "foo@bar.com")
user.2
foo.destroy
foo
User.find(1)
User.find(3)
User.find_by_email(mhartl@example.com)
User.find_by_email("mhartl@example.com")
User.find_by(email: "mhartl@example.com")
User.second
User.all
User.last
User.create(name: "Michael Hartl", email: "mhartl@example.com")
user = User.find(1)
User.create(name: "A Nother", email: "another@example.org")
user.email = "mhartl@example.net"
user,save
user.email = "foo@bar.com"
user.reload.email
user.update_attributes(name: "The Dude", email: "dude@abides.org")
user = User.new(name: "", email: "mhartl@example.com")
user.save
user.valid?
user.errors.full_messages
User.create(name: "Michael Hartl", email: "mhartl@example.com", password: "foobar", password_confirmation: "foobar")
user.first
user = User.find_by(email: "mhartl@example.com")
user.authenticate("invalid")
user.authenticate("foobar")
exit
User.first
user = User.first
user.update_attributes(name: "Example User", email: "example@railstutorial.org", password: "foobar", password_confirmation: "foobar")
user
